GenCovs
debugSource('~/Documents/Dissertation/code/CompFunctions.R')
debugSource('~/Documents/Dissertation/code/CompFunctions.R')
source'~/Documents/Dissertation/code/CompFunctions.R'()
source('~/Documents/Dissertation/code/CompFunctions.R'
)
assign(paste0("SimRes", array_val), apply(as.matrix(1:nruns, ncol = 1), 1, TestNewGibbsApproach, fil = fil, GenWithMeasError = GenWithMeasError, RunWithMeasError = RunWithMeasError, GibbsCovsType = GibbsCovsType, simUnderAlt = simUnderAlt, useRMANOVAOnly = useRMANOVAOnly, toll = toll, nsamp = nsamp, seedstouse = seedstouse, Wishdf = Wishdf, ncondlevels = ncondlevels, condEffSize = condEffSize, MeasErrorMultFactor = MeasErrorMultFactor, BetweenCovMultFactor = BetweenCovMultFactor, cholesky = cholesky, choleskyOptim = choleskyOptim, BiasOptimStartValuesFactor = BiasOptimStartValuesFactor, nreps = nreps, CompMI = CompMI, GibbsPillaiPval = GibbsPillaiPval, TestingData25Jan2019 = FALSE, NewModelingMethod = NewModelingMethod, SimDistForm = SimDistForm,CompMICombineStats = CompMICombineStats, ShrinkCov = ShrinkCov, FullReturn = FullReturn))
nruns <- 50
assign(paste0("SimRes", array_val), apply(as.matrix(1:nruns, ncol = 1), 1, TestNewGibbsApproach, fil = fil, GenWithMeasError = GenWithMeasError, RunWithMeasError = RunWithMeasError, GibbsCovsType = GibbsCovsType, simUnderAlt = simUnderAlt, useRMANOVAOnly = useRMANOVAOnly, toll = toll, nsamp = nsamp, seedstouse = seedstouse, Wishdf = Wishdf, ncondlevels = ncondlevels, condEffSize = condEffSize, MeasErrorMultFactor = MeasErrorMultFactor, BetweenCovMultFactor = BetweenCovMultFactor, cholesky = cholesky, choleskyOptim = choleskyOptim, BiasOptimStartValuesFactor = BiasOptimStartValuesFactor, nreps = nreps, CompMI = CompMI, GibbsPillaiPval = GibbsPillaiPval, TestingData25Jan2019 = FALSE, NewModelingMethod = NewModelingMethod, SimDistForm = SimDistForm,CompMICombineStats = CompMICombineStats, ShrinkCov = ShrinkCov, FullReturn = FullReturn))
SimRes963
source('~/Documents/Dissertation/Paper1/Tables/RSimsPowerTable.R')
source('~/Documents/Dissertation/Paper1/Tables/RSimsPowerTable.R')
load("/Users/Scott/Documents/Dissertation Data/GEUV1Data/abDatasetsNoOtherGroupsFiltered.RData")
head(abDatasetsFiltered[[1]])
head(abDatasetsFiltered[[2]])
head(abDatasetsFiltered[[3]])
head(abDatasetsFiltered[[4]])
head(abDatasetsFiltered[[5]])
head(abDatasetsFiltered[[6]])
head(abDatasetsFiltered[[7]])
head(abDatasetsFiltered[[8]])
head(abDatasetsFiltered[[9]])
tail(abDatasetsFiltered[[9]])
head(abDatasetsFiltered[[10]], 10)
tail(abDatasetsFiltered[[10]], 10)
names(abDatasetsFiltered)[10]
onCluster <- F
if(onCluster==TRUE){source("~/.Rprofile")}
#Last Updated 9-13-18
library(data.table)
if(onCluster==TRUE){
fil1 <- "/nas/longleaf/home/skvanbur/res/GEUV1Data/FilesToTestNewGibbsApproach3Responses.RData"
fil2 <- "/nas/longleaf/home/skvanbur/res/GEUV1Data/FilesToTestNewGibbsApproach4Responses.RData"
fil3 <- "/nas/longleaf/home/skvanbur/res/GEUV1Data/FilesToTestNewGibbsApproach7Responses.RData"
func_loc <-  "~/code/CompFunctions.R"
def_wd <- "~/res/GEUV1Data"
def_wd2 <- "~/res/GEUV1Data"
}else{
fil1 <- "/Users/Scott/Documents/Dissertation Data/GEUV1Data/FilesToTestNewGibbsApproach3Responses.RData"
fil2 <- "/Users/Scott/Documents/Dissertation Data/GEUV1Data/FilesToTestNewGibbsApproach4Responses.RData"
fil3 <- "/Users/Scott/Documents/Dissertation Data/GEUV1Data/FilesToTestNewGibbsApproach7Responses.RData"
func_loc <- "/Users/Scott/Documents/Dissertation/Code/CompFunctions.R"
def_wd <- "/Users/Scott/Documents/Dissertation/res/GEUV1Data"
def_wd2 <- "/Users/Scott/Documents/Dissertation Data/GEUV1Data"
}
setwd(def_wd)
source(func_loc)
#Now, also need to save stuff needed in fil1, fil2, fil3 that will be the bases for much of the testing
setwd(def_wd2)
#After making the decision to only use DRISeq, filtering, I chose to use gene ENSG00000000938.12, which has 4 transcripts
#after applying DRIMSeq level filtering
useDRIMSeqFiltering <- TRUE
#After making the decision to only use DRISeq, filtering, I chose to use gene ENSG00000000938.12, which has 4 transcripts
#after applying DRIMSeq level filtering
useDRIMSeqFiltering <- TRUE
if(useDRIMSeqFiltering==TRUE){
load("abDatasetsNoOtherGroupsFiltered.RData")
useDRIMSeqFiltering <- TRUE
#"ENSG00000002549.12"
#"ENSG00000000938.12"
#"ENSG00000001497.16"
abDatasetsToUse <- abDatasetsFiltered[c("ENSG00000002549.12")]
fullgenenames <- names(abDatasetsToUse)
Group <- factor(key$Condition)
samps <- NULL
useOtherGroups <- FALSE
PillaiOnly <- TRUE
load("/Users/Scott/Documents/Dissertation Data/GEUV1Data/ilrMeansCovsBoot/ilrMeansCovsNoOtherGroupsFilteredPart1.RData")
ilrMeansCovs <- ilrMeansCovsNoOtherGroupsFilteredPart1[c("ENSG00000002549.12")]
failedgibbssamps <- NULL
CompositionalObsAnalysis(abDatasetsToUse = abDatasetsToUse,
fullgenenames = fullgenenames, Group = Group,
ilrMeansCovs = ilrMeansCovs, nsamp = 462,
failedgibbssamps = failedgibbssamps, samps = samps,
useOtherGroups = useOtherGroups, PillaiOnly = PillaiOnly, saveTestingData = TRUE)
}else{
load("abDatasets.RData")
#"ENSG00000002549.12"
#"ENSG00000000938.12"
#"ENSG00000001497.16"
abDatasetsToUse <- abDatasets[c("ENSG00000002549.12")]
fullgenenames <- names(abDatasetsToUse)
Group <- factor(key$Condition)
samps <- NULL
useOtherGroups <- TRUE
PillaiOnly <- TRUE
load("/Users/Scott/Documents/Dissertation Data/GEUV1Data/ilrMeansCovs/ilrMeansCovsOtherGroupsPart1.RData")
ilrMeansCovs <- ilrMeansCovsOtherGroupsPart1[c("ENSG00000002549.12")]
failedgibbssamps <- NULL
CompositionalObsAnalysis(abDatasetsToUse = abDatasetsToUse,
fullgenenames = fullgenenames, Group = Group,
ilrMeansCovs = ilrMeansCovs,
failedgibbssamps = failedgibbssamps, samps = samps,
useOtherGroups = useOtherGroups, PillaiOnly = PillaiOnly, saveTestingData = TRUE)
}
load("/Users/Scott/Documents/Dissertation Data/GEUV1Data/FilesToTestNewGibbsApproach2ResponsesDRIMSeqFiltered.RData")
head(Y)
GibbsCovsToUse[[1]]
GibbsCovsToUse[[2]]
GibbsCovsToUse[[3]]
coef(res1)
coef(res1null)
source('~/Documents/Dissertation/Paper1/Tables/RSimsPowerTable.R')
load("/Users/Scott/Documents/Dissertation Data/GEUV1Data/FilesToTestNewGibbsApproach3Responses.RData")
load("/Users/Scott/Documents/Dissertation Data/GEUV1Data/abDatasets.RData")
head(abDatasets[gene_id])
load("/Users/Scott/Documents/Dissertation Data/GEUV1Data/abDatasetsNoOtherGroupsFiltered.RData")
head(abDatasetsFiltered[gene_id])
head(abDatasetsFiltered[gene_id]$ENSG00000001497.16)
head(abDatasets[gene_id]$ENSG00000001497.16)
source('~/Documents/Dissertation/Paper1/Tables/RSimsPowerTable.R')
source('~/Documents/Dissertation/Paper1/Tables/RSimsPowerTable.R')
source('~/Documents/Dissertation/Paper1/Tables/RSimsPowerTable.R')
load("/Users/Scott/Documents/Dissertation Data/GEUV1Data/FilesToTestNewGibbsApproach3ResponsesDRIMSeqFiltered.RData")
load("/Users/Scott/Documents/Dissertation Data/GEUV1Data/FilesToTestNewGibbsApproach3Responses.RData")
load("/Users/Scott/Documents/Dissertation Data/GEUV1Data/abDatasetsNoOtherGroupsFiltered.RData")
source('~/Documents/Dissertation/Paper1/Tables/RSimsPowerTable.R')
load("/Users/Scott/Documents/Dissertation Data/GEUV1Data/abDatasets.RData")
head(abDatasets["ENSG00000001497.16"]$ENSG00000001497.16)
head(abDatasetsFiltered["ENSG00000001497.16"]$ENSG00000001497.16)
head(abDatasetsFiltered[[9]])
head(abDatasetsFiltered[[10]])
names(abDatasetsFiltered)[10]
source('~/Documents/Dissertation/Paper1/Tables/RSimsPowerTable.R')
head(abDatasets["ENSG00000001497.16"]$ENSG00000001497.16)
tail(abDatasets["ENSG00000001497.16"]$ENSG00000001497.16)
head(abDatasetsFiltered[[10]])
head(abDatasetsFiltered[[11]])
head(abDatasetsFiltered[[12]])
tail(abDatasetsFiltered[[12]])
names(abDatasetsFiltered)[12]
onCluster <- F
if(onCluster==TRUE){source("~/.Rprofile")}
#Last Updated 9-13-18
library(data.table)
if(onCluster==TRUE){
fil1 <- "/nas/longleaf/home/skvanbur/res/GEUV1Data/FilesToTestNewGibbsApproach3Responses.RData"
fil2 <- "/nas/longleaf/home/skvanbur/res/GEUV1Data/FilesToTestNewGibbsApproach4Responses.RData"
fil3 <- "/nas/longleaf/home/skvanbur/res/GEUV1Data/FilesToTestNewGibbsApproach7Responses.RData"
func_loc <-  "~/code/CompFunctions.R"
def_wd <- "~/res/GEUV1Data"
def_wd2 <- "~/res/GEUV1Data"
}else{
fil1 <- "/Users/Scott/Documents/Dissertation Data/GEUV1Data/FilesToTestNewGibbsApproach3Responses.RData"
fil2 <- "/Users/Scott/Documents/Dissertation Data/GEUV1Data/FilesToTestNewGibbsApproach4Responses.RData"
fil3 <- "/Users/Scott/Documents/Dissertation Data/GEUV1Data/FilesToTestNewGibbsApproach7Responses.RData"
func_loc <- "/Users/Scott/Documents/Dissertation/Code/CompFunctions.R"
def_wd <- "/Users/Scott/Documents/Dissertation/res/GEUV1Data"
def_wd2 <- "/Users/Scott/Documents/Dissertation Data/GEUV1Data"
}
setwd(def_wd)
source(func_loc)
#Now, also need to save stuff needed in fil1, fil2, fil3 that will be the bases for much of the testing
setwd(def_wd2)
#After making the decision to only use DRISeq, filtering, I chose to use gene ENSG00000000938.12, which has 4 transcripts
#after applying DRIMSeq level filtering
useDRIMSeqFiltering <- TRUE
if(useDRIMSeqFiltering==TRUE){
load("abDatasetsNoOtherGroupsFiltered.RData")
useDRIMSeqFiltering <- TRUE
#"ENSG00000002549.12"
#"ENSG00000000938.12"
#"ENSG00000001497.16"
#"ENSG00000002822.15"
abDatasetsToUse <- abDatasetsFiltered[c("ENSG00000002822.15")]
fullgenenames <- names(abDatasetsToUse)
Group <- factor(key$Condition)
samps <- NULL
useOtherGroups <- FALSE
PillaiOnly <- TRUE
load("/Users/Scott/Documents/Dissertation Data/GEUV1Data/ilrMeansCovsBoot/ilrMeansCovsNoOtherGroupsFilteredPart1.RData")
ilrMeansCovs <- ilrMeansCovsNoOtherGroupsFilteredPart1[c("ENSG00000002822.15")]
failedgibbssamps <- NULL
CompositionalObsAnalysis(abDatasetsToUse = abDatasetsToUse,
fullgenenames = fullgenenames, Group = Group,
ilrMeansCovs = ilrMeansCovs, nsamp = 462,
failedgibbssamps = failedgibbssamps, samps = samps,
useOtherGroups = useOtherGroups, PillaiOnly = PillaiOnly, saveTestingData = TRUE)
}else{
load("abDatasets.RData")
#"ENSG00000002549.12"
#"ENSG00000000938.12"
#"ENSG00000001497.16"
#"ENSG00000002822.15"
abDatasetsToUse <- abDatasets[c("ENSG00000002549.12")]
fullgenenames <- names(abDatasetsToUse)
Group <- factor(key$Condition)
samps <- NULL
useOtherGroups <- TRUE
PillaiOnly <- TRUE
load("/Users/Scott/Documents/Dissertation Data/GEUV1Data/ilrMeansCovs/ilrMeansCovsOtherGroupsPart1.RData")
ilrMeansCovs <- ilrMeansCovsOtherGroupsPart1[c("ENSG00000002549.12")]
failedgibbssamps <- NULL
CompositionalObsAnalysis(abDatasetsToUse = abDatasetsToUse,
fullgenenames = fullgenenames, Group = Group,
ilrMeansCovs = ilrMeansCovs,
failedgibbssamps = failedgibbssamps, samps = samps,
useOtherGroups = useOtherGroups, PillaiOnly = PillaiOnly, saveTestingData = TRUE)
}
load("/Users/Scott/Documents/Dissertation Data/GEUV1Data/FilesToTestNewGibbsApproach3ResponsesDRIMSeqFilteredGene2.RData")
load("/Users/Scott/Documents/Dissertation Data/GEUV1Data/abDatasets.RData")
load("/Users/Scott/Documents/Dissertation Data/GEUV1Data/abDatasetsNoOtherGroupsFiltered.RData")
head(abDatasets["ENSG00000001497.16"]$ENSG00000001497.16)
head(abDatasetsFiltered["ENSG00000001497.16"]$ENSG00000001497.16)
source('~/Documents/Dissertation/Paper1/Tables/RSimsPowerTable.R')
source('~/Documents/Dissertation/Paper1/Tables/RSimsPowerTable.R')
source('~/Documents/Dissertation/res/SQCCReproduceOldResBeforeCommonCode/GenerateROCCurves.R')
source('~/Documents/Dissertation/res/SQCCReproduceOldResBeforeCommonCode/GenerateROCCurves.R')
source('~/Documents/Dissertation/res/SQCCReproduceOldResBeforeCommonCode/GenerateROCCurves.R')
source('~/Documents/Dissertation/res/SQCCReproduceOldResBeforeCommonCode/GenerateROCCurves.R')
source('~/Documents/Dissertation/res/SQCCReproduceOldResBeforeCommonCode/GenerateROCCurves.R')
source('~/Documents/Dissertation/res/SQCCReproduceOldResBeforeCommonCode/GenerateROCCurves.R')
source('~/Documents/Dissertation/res/SQCCReproduceOldResBeforeCommonCode/GenerateROCCurves.R')
source('~/Documents/Dissertation/res/SQCCReproduceOldResBeforeCommonCode/GenerateROCCurves.R')
source('~/Documents/Dissertation/Paper1/Tables/RSimsPowerTable.R')
load("/Users/Scott/Documents/Dissertation Data/GEUV1Data/FilesToTestNewGibbsApproach3ResponsesDRIMSeqFiltered.RData")
source('~/Documents/Dissertation/Paper1/Tables/RSimsPowerTable.R')
load("/Users/Scott/Documents/Dissertation Data/GEUV1Data/abDatasetsNoOtherGroupsFiltered.RData")
load("/Users/Scott/Documents/Dissertation Data/GEUV1Data/abDatasetsNoOtherGroupsFiltered.RData")
levels(key$Condition)
new_key <- subset(key, key$Condition=="CEU" | key$Condition=="FIN")
curr_dat <- abDatasetsFiltered[[i]]
i=1
curr_dat <- abDatasetsFiltered[[i]]
head(curr_dat)
curr_dat2 <- subset(curr_dat, rownames(curr_dat) %in% paste0(new_key$Identifier, "TPM"))
curr_datCond1 <- subset(curr_dat, rownames(curr_dat) %in% paste0(new_keyCEU$Identifier, "TPM"))
#new_key <- subset(key, key$Condition=="CEU" | key$Condition=="FIN")
new_keyCEU <- subset(key, key$Condition=="CEU")
new_keyFIN <- subset(key, key$Condition=="FIN")
curr_datCond1 <- subset(curr_dat, rownames(curr_dat) %in% paste0(new_keyCEU$Identifier, "TPM"))
curr_datCond2 <- subset(curr_dat, rownames(curr_dat) %in% paste0(new_keyFIN$Identifier, "TPM"))
#Examine how the effect sizes used in the r based simulation power analyses compare to the same quantities observed in real data
library(compositions)
d1 <- ilr(curr_datCond1)
head(d1)
head(curr_datCond1)
ilr(curr_datCond1)
d1 <- ilr(curr_datCond1)
d1 <- data.frame(ilr(curr_datCond1))
head(d1)
d2 <- data.frame(ilr(curr_datCond2))
d11 <- colMeans(d1)
d11
d12 <- colMeans(d2)
d12
d11/d12
EffSize <- mean(d11/d12)
EffSize <- numeric()
for(i in 1:10){
curr_dat <- abDatasetsFiltered[[i]]
curr_datCond1 <- subset(curr_dat, rownames(curr_dat) %in% paste0(new_keyCEU$Identifier, "TPM"))
curr_datCond2 <- subset(curr_dat, rownames(curr_dat) %in% paste0(new_keyFIN$Identifier, "TPM"))
d1 <- data.frame(ilr(curr_datCond1))
d2 <- data.frame(ilr(curr_datCond2))
d11 <- colMeans(d1)
d12 <- colMeans(d2)
EffSize[i] <- mean(d11/d12)
}
EffSize
EffSize <- numeric()
for(i in 1:10){
curr_dat <- abDatasetsFiltered[[i]]
curr_datCond1 <- subset(curr_dat, rownames(curr_dat) %in% paste0(new_keyCEU$Identifier, "TPM"))
curr_datCond2 <- subset(curr_dat, rownames(curr_dat) %in% paste0(new_keyFIN$Identifier, "TPM"))
d1 <- data.frame(ilr(curr_datCond1))
d2 <- data.frame(ilr(curr_datCond2))
d11 <- colMeans(d1)
d12 <- colMeans(d2)
EffSize[i] <- max(mean(d11/d12), mean(d11/d12))
}
EffSize
EffSize <- numeric()
for(i in 1:10){
curr_dat <- abDatasetsFiltered[[i]]
curr_datCond1 <- subset(curr_dat, rownames(curr_dat) %in% paste0(new_keyCEU$Identifier, "TPM"))
curr_datCond2 <- subset(curr_dat, rownames(curr_dat) %in% paste0(new_keyFIN$Identifier, "TPM"))
d1 <- data.frame(ilr(curr_datCond1))
d2 <- data.frame(ilr(curr_datCond2))
d11 <- colMeans(d1)
d12 <- colMeans(d2)
EffSize[i] <- max(mean(d11/d12), mean(d12/d11))
}
EffSize
calcEffectiveEffSize <- function(x){
curr_dat <- x
curr_datCond1 <- subset(curr_dat, rownames(curr_dat) %in% paste0(new_keyCEU$Identifier, "TPM"))
curr_datCond2 <- subset(curr_dat, rownames(curr_dat) %in% paste0(new_keyFIN$Identifier, "TPM"))
d1 <- data.frame(ilr(curr_datCond1))
d2 <- data.frame(ilr(curr_datCond2))
d11 <- colMeans(d1)
d12 <- colMeans(d2)
EffSize <- max(mean(d11/d12), mean(d12/d11))
return(EffSize)
}
t1 <- lapply(abDatasetsFiltered[1:100], calcEffectiveEffSize)
t1
calcEffectiveEffSize <- function(x){
curr_dat <- x
curr_gene <- names(x)
curr_datCond1 <- subset(curr_dat, rownames(curr_dat) %in% paste0(new_keyCEU$Identifier, "TPM"))
curr_datCond2 <- subset(curr_dat, rownames(curr_dat) %in% paste0(new_keyFIN$Identifier, "TPM"))
d1 <- data.frame(ilr(curr_datCond1))
d2 <- data.frame(ilr(curr_datCond2))
d11 <- colMeans(d1)
d12 <- colMeans(d2)
EffSize <- max(mean(d11/d12), mean(d12/d11))
ret <- data.frame(curr_gene = curr_gene, EffSize = EffSize)
return(EffSize)
}
t1 <- lapply(abDatasetsFiltered[1:100], calcEffectiveEffSize)
t1
calcEffectiveEffSize <- function(x){
curr_dat <- x
curr_gene <- names(x)
curr_datCond1 <- subset(curr_dat, rownames(curr_dat) %in% paste0(new_keyCEU$Identifier, "TPM"))
curr_datCond2 <- subset(curr_dat, rownames(curr_dat) %in% paste0(new_keyFIN$Identifier, "TPM"))
d1 <- data.frame(ilr(curr_datCond1))
d2 <- data.frame(ilr(curr_datCond2))
d11 <- colMeans(d1)
d12 <- colMeans(d2)
EffSize <- max(mean(d11/d12), mean(d12/d11))
ret <- data.frame(curr_gene = curr_gene, EffSize = EffSize)
return(ret)
}
t1 <- lapply(abDatasetsFiltered[1:100], calcEffectiveEffSize)
g1
t1
as.matrix(1:100, ncol = 1)
calcEffectiveEffSize <- function(x, abDatasetsFiltered){
curr_dat <- abDatasetsFiltered[[x]]
curr_gene <- names(abDatasetsFiltered)[x]
curr_datCond1 <- subset(curr_dat, rownames(curr_dat) %in% paste0(new_keyCEU$Identifier, "TPM"))
curr_datCond2 <- subset(curr_dat, rownames(curr_dat) %in% paste0(new_keyFIN$Identifier, "TPM"))
d1 <- data.frame(ilr(curr_datCond1))
d2 <- data.frame(ilr(curr_datCond2))
d11 <- colMeans(d1)
d12 <- colMeans(d2)
EffSize <- max(mean(d11/d12), mean(d12/d11))
ret <- data.frame(curr_gene = curr_gene, EffSize = EffSize)
return(ret)
}
t1 <- apply(as.matrix(1:100, ncol = 1), 1,  calcEffectiveEffSize, abDatasetsFiltered = abDatasetsFiltered)
t1
library(data.table)
EffSizes <- rbindlist(t1)
EffSizes
t1 <- apply(as.matrix(1:length(abDatasetsFiltered), ncol = 1), 1,  calcEffectiveEffSize, abDatasetsFiltered = abDatasetsFiltered)
EffSizes <- rbindlist(t1)
summary(EffSizes$EffSize)
View(EffSizes)
x
x <- 1
curr_dat <- abDatasetsFiltered[[x]]
curr_gene <- names(abDatasetsFiltered)[x]
curr_datCond1 <- subset(curr_dat, rownames(curr_dat) %in% paste0(new_keyCEU$Identifier, "TPM"))
curr_datCond2 <- subset(curr_dat, rownames(curr_dat) %in% paste0(new_keyFIN$Identifier, "TPM"))
d1 <- data.frame(ilr(curr_datCond1))
d2 <- data.frame(ilr(curr_datCond2))
d11 <- colMeans(d1)
d12 <- colMeans(d2)
d11
d12
EffSize <- max(mean(d11/d12), mean(d12/d11))
EffSize
calcEffectiveEffSize <- function(x, abDatasetsFiltered){
curr_dat <- abDatasetsFiltered[[x]]
curr_gene <- names(abDatasetsFiltered)[x]
curr_datCond1 <- subset(curr_dat, rownames(curr_dat) %in% paste0(new_keyCEU$Identifier, "TPM"))
curr_datCond2 <- subset(curr_dat, rownames(curr_dat) %in% paste0(new_keyFIN$Identifier, "TPM"))
d1 <- data.frame(ilr(curr_datCond1))
d2 <- data.frame(ilr(curr_datCond2))
d11 <- colMeans(d1)
d12 <- colMeans(d2)
EffSize <- max(abs(mean(d11/d12)), abs(mean(d12/d11)))
ret <- data.frame(curr_gene = curr_gene, EffSize = EffSize)
return(ret)
}
t1 <- apply(as.matrix(1:length(abDatasetsFiltered), ncol = 1), 1,  calcEffectiveEffSize, abDatasetsFiltered = abDatasetsFiltered)
EffSizes <- rbindlist(t1)
summary(EffSizes)
summary(EffSizes$EffSize)
quantile(EffSizes$EffSize, probs = seq(0,1, 0.10))
quantile(EffSizes$EffSize, probs = seq(0,1, 0.05))
calcEffectiveEffSize <- function(x, abDatasetsFiltered){
curr_dat <- abDatasetsFiltered[[x]]
curr_gene <- names(abDatasetsFiltered)[x]
curr_datCond1 <- subset(curr_dat, rownames(curr_dat) %in% paste0(new_keyCEU$Identifier, "TPM"))
curr_datCond2 <- subset(curr_dat, rownames(curr_dat) %in% paste0(new_keyFIN$Identifier, "TPM"))
#Convert to ilr scale for the comparison
d1 <- data.frame(ilr(curr_datCond1))
d2 <- data.frame(ilr(curr_datCond2))
d11 <- colMeans(d1)
d12 <- colMeans(d2)
#Take abs value to keep everything on the positive scale
#Can't take abs value previous since then -0.85 and 0.85 would give no difference (Eff)
EffSize <- max(mean(d11/d12), mean(d12/d11))
ret <- data.frame(curr_gene = curr_gene, EffSize = EffSize)
return(ret)
}
t1 <- apply(as.matrix(1:length(abDatasetsFiltered), ncol = 1), 1,  calcEffectiveEffSize, abDatasetsFiltered = abDatasetsFiltered)
EffSizes <- rbindlist(t1)
summary(EffSizes$EffSize)
quantile(EffSizes$EffSize, probs = seq(0,1, 0.05))
quantile(abs(EffSizes$EffSize), probs = seq(0,1, 0.05))
calcEffectiveEffSize <- function(x, abDatasetsFiltered){
curr_dat <- abDatasetsFiltered[[x]]
curr_gene <- names(abDatasetsFiltered)[x]
curr_datCond1 <- subset(curr_dat, rownames(curr_dat) %in% paste0(new_keyCEU$Identifier, "TPM"))
curr_datCond2 <- subset(curr_dat, rownames(curr_dat) %in% paste0(new_keyFIN$Identifier, "TPM"))
#Convert to ilr scale for the comparison
d1 <- data.frame(ilr(curr_datCond1))
d2 <- data.frame(ilr(curr_datCond2))
d11 <- colMeans(d1)
d12 <- colMeans(d2)
#Take abs value to keep everything on the positive scale
#Can't take abs value previous since then -0.85 and 0.85 would give no difference (Eff)
EffSize <- abs(max(mean(d11/d12), mean(d12/d11)))
ret <- data.frame(curr_gene = curr_gene, EffSize = EffSize)
return(ret)
}
t1 <- apply(as.matrix(1:length(abDatasetsFiltered), ncol = 1), 1,  calcEffectiveEffSize, abDatasetsFiltered = abDatasetsFiltered)
EffSizes <- rbindlist(t1)
quantile(abs(EffSizes$EffSize), probs = seq(0,1, 0.05))
quantile(EffSizes$EffSize, probs = seq(0,1, 0.05))
quantile(EffSizes$EffSize, probs = seq(0,1, 0.01))
quantile(EffSizes$EffSize, probs = seq(0,1, 0.005))
attributes(abDatasetsFiltered)
attributes(abDatasetsFiltered[[1]])
load("/Users/Scott/Documents/Dissertation Data/GEUV1Data/abDatasets.RData")
attr(abDatasets[[1]])
attr(abDatasets[[1]], "MajorTrans")
x <- 1
curr_dat <- abDatasetsFiltered[[x]]
curr_gene <- names(abDatasetsFiltered)[x]
curr_datCond1 <- subset(curr_dat, rownames(curr_dat) %in% paste0(new_keyCEU$Identifier, "TPM"))
curr_datCond2 <- subset(curr_dat, rownames(curr_dat) %in% paste0(new_keyFIN$Identifier, "TPM"))
#Convert to ilr scale for the comparison
d1 <- data.frame(ilr(curr_datCond1))
d2 <- data.frame(ilr(curr_datCond2))
d11 <- colMeans(d1)
d12 <- colMeans(d2)
#Take abs value to keep everything on the positive scale as an effect size of -1.5 is the same magnitude as
#1.5, etc
EffSize <- abs(max(mean(d11/d12), mean(d12/d11)))
n11 <- ilrInv(d11, orig = curr_dat)
n22 <- ilrInv(d12, orig = curr_dat)
n11
n22
MajorTrans <- attr(abDatasets[[x]], "MajorTrans")
abDatasets[curr_gene]
abDatasets[[curr_gene]]
MajorTrans <- attr(abDatasets[[curr_gene]], "MajorTrans")
n11 <- ilrInv(d11, orig = curr_dat)
n22 <- ilrInv(d12, orig = curr_dat)
MajorTrans <- attr(abDatasets[[curr_gene]], "MajorTrans")
n11
n22
MajorTrans
n11[MajorTrans]
calcEffectiveEffSize <- function(x, abDatasetsFiltered, abDatasets){
curr_dat <- abDatasetsFiltered[[x]]
curr_gene <- names(abDatasetsFiltered)[x]
curr_datCond1 <- subset(curr_dat, rownames(curr_dat) %in% paste0(new_keyCEU$Identifier, "TPM"))
curr_datCond2 <- subset(curr_dat, rownames(curr_dat) %in% paste0(new_keyFIN$Identifier, "TPM"))
#Convert to ilr scale for the comparison
d1 <- data.frame(ilr(curr_datCond1))
d2 <- data.frame(ilr(curr_datCond2))
d11 <- colMeans(d1)
d12 <- colMeans(d2)
#Take abs value to keep everything on the positive scale as an effect size of -1.5 is the same magnitude as
#1.5, etc
EffSize <- abs(max(mean(d11/d12), mean(d12/d11)))
n11 <- ilrInv(d11, orig = curr_dat)
n22 <- ilrInv(d12, orig = curr_dat)
MajorTrans <- attr(abDatasets[[curr_gene]], "MajorTrans")
propdiffMajorTrans <- abs(n11[MajorTrans] - n22[MajorTrans])
ret <- data.frame(curr_gene = curr_gene, EffSize = EffSize, propdiffMajorTrans = propdiffMajorTrans)
return(ret)
}
t1 <- apply(as.matrix(1:length(abDatasetsFiltered), ncol = 1), 1,  calcEffectiveEffSize, abDatasetsFiltered = abDatasetsFiltered)
calcEffectiveEffSize <- function(x, abDatasetsFiltered, abDatasets){
curr_dat <- abDatasetsFiltered[[x]]
curr_gene <- names(abDatasetsFiltered)[x]
curr_datCond1 <- subset(curr_dat, rownames(curr_dat) %in% paste0(new_keyCEU$Identifier, "TPM"))
curr_datCond2 <- subset(curr_dat, rownames(curr_dat) %in% paste0(new_keyFIN$Identifier, "TPM"))
#Convert to ilr scale for the comparison
d1 <- data.frame(ilr(curr_datCond1))
d2 <- data.frame(ilr(curr_datCond2))
d11 <- colMeans(d1)
d12 <- colMeans(d2)
#Take abs value to keep everything on the positive scale as an effect size of -1.5 is the same magnitude as
#1.5, etc
EffSize <- abs(max(mean(d11/d12), mean(d12/d11)))
n11 <- ilrInv(d11, orig = curr_dat)
n22 <- ilrInv(d12, orig = curr_dat)
MajorTrans <- attr(abDatasets[[curr_gene]], "MajorTrans")
propdiffMajorTrans <- abs(n11[MajorTrans] - n22[MajorTrans])
ret <- data.frame(curr_gene = curr_gene, EffSize = EffSize, propdiffMajorTrans = propdiffMajorTrans)
return(ret)
}
t1 <- apply(as.matrix(1:length(abDatasetsFiltered), ncol = 1), 1,  calcEffectiveEffSize, abDatasetsFiltered = abDatasetsFiltered,
abDatasets = abDatasets)
EffSizes <- rbindlist(t1)
head(EffSizes)
quantile(EffSizes$EffSize, probs = seq(0,1,0.05))
quantile(EffSizes$EffSize, probs = seq(0,1,0.005))
quantile(EffSizes$propdiffMajorTrans, probs = seq(0,1,0.005))
source('~/Documents/Dissertation/Paper1/Tables/RSimsPowerTable.R')
source('~/Documents/Dissertation/Paper1/Tables/RSimsPowerTable.R')
library(knitr)
sessionInfo()
